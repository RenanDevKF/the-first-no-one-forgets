"""
1. O que sÃ£o Classes e MÃ©todos GenÃ©ricos?
- Classes genÃ©ricas sÃ£o aquelas que podem operar com diferentes tipos de dados sem precisar definir explicitamente o tipo no momento da criaÃ§Ã£o.
- MÃ©todos genÃ©ricos sÃ£o funÃ§Ãµes dentro de uma classe que podem aceitar diferentes tipos de entrada e ainda assim funcionar corretamente.

Em Python, conseguimos implementar isso utilizando tipagem dinÃ¢mica e tipos genÃ©ricos com typing.Generic.

"""
# 2. Exemplo BÃ¡sico: Classe GenÃ©rica com Tipagem DinÃ¢mica
# Como Python nÃ£o exige declarar tipos, essa classe jÃ¡ Ã© genÃ©rica por natureza.

class Caixa:
    def __init__(self, item):
        self.item = item

    def mostrar_item(self):
        print(f"Item armazenado: {self.item}")

# Testando com diferentes tipos
caixa1 = Caixa(10)        # Armazena um nÃºmero
caixa2 = Caixa("Python")  # Armazena uma string
caixa3 = Caixa([1, 2, 3]) # Armazena uma lista

caixa1.mostrar_item()  # Item armazenado: 10
caixa2.mostrar_item()  # Item armazenado: Python
caixa3.mostrar_item()  # Item armazenado: [1, 2, 3]

# Usando typing.Generic para Especificar Tipos GenÃ©ricos
# Se quisermos ser mais explÃ­citos sobre os tipos, podemos usar typing.Generic e TypeVar para definir classes realmente genÃ©ricas:

from typing import Generic, TypeVar

T = TypeVar('T')  # Criando um tipo genÃ©rico

class Caixa(Generic[T]):
    def __init__(self, item: T):
        self.item = item

    def mostrar_item(self) -> T:
        return self.item

# Testando com diferentes tipos
caixa_numero = Caixa(42)            # Armazena um nÃºmero inteiro
caixa_texto = Caixa("Hello World")  # Armazena uma string

print(caixa_numero.mostrar_item())  # SaÃ­da: 42
print(caixa_texto.mostrar_item())   # SaÃ­da: Hello World


#4. MÃ©todos GenÃ©ricos em Python
#Podemos ter mÃ©todos dentro da classe que tambÃ©m sejam genÃ©ricos e trabalhem com diferentes tipos.
#Exemplo: Criando um mÃ©todo que aceita qualquer tipo de dado
# Aqui o mÃ©todo inverter_lista pode trabalhar tanto com nÃºmeros quanto com strings.

from typing import List

class Processador:
    @staticmethod
    def inverter_lista(lista: List[T]) -> List[T]:
        return lista[::-1]

# Testando com listas de diferentes tipos
print(Processador.inverter_lista([1, 2, 3, 4]))       # [4, 3, 2, 1]
print(Processador.inverter_lista(["a", "b", "c"]))    # ['c', 'b', 'a']

# . AplicaÃ§Ã£o de MÃ©todos GenÃ©ricos em Estruturas de Dados
#Podemos usar classes genÃ©ricas para criar estruturas de dados reutilizÃ¡veis.
#Exemplo: Criando uma Pilha GenÃ©rica

from typing import List, TypeVar, Generic

T = TypeVar('T')  # Criando um tipo genÃ©rico

class Pilha(Generic[T]):
    def __init__(self):
        self.itens: List[T] = []  # Lista genÃ©rica

    def empilhar(self, item: T):
        self.itens.append(item)

    def desempilhar(self) -> T:
        return self.itens.pop() if self.itens else None

    def topo(self) -> T:
        return self.itens[-1] if self.itens else None

# Testando com nÃºmeros
pilha_int = Pilha[int]()
pilha_int.empilhar(10)
pilha_int.empilhar(20)
print(pilha_int.desempilhar())  # 20

# Testando com strings
pilha_str = Pilha[str]()
pilha_str.empilhar("A")
pilha_str.empilhar("B")
print(pilha_str.topo())  # "B"

"""
ConclusÃ£o
âœ… Classes e mÃ©todos genÃ©ricos em Python tornam o cÃ³digo mais reutilizÃ¡vel, escalÃ¡vel e seguro.
âœ… O Python jÃ¡ Ã© dinÃ¢mico, mas Generic[T] ajuda a manter tipagem mais clara.
âœ… AplicaÃ§Ã£o comum: Estruturas de dados como pilhas, filas e coleÃ§Ãµes.

ğŸ’¡ Se estiver aprendendo POO, experimente usar tipos genÃ©ricos para melhorar seus projetos! 

"""