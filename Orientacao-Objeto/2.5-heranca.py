""""
O que √© Heran√ßa?
A heran√ßa √© um conceito da Programa√ß√£o Orientada a Objetos (POO) que permite criar uma nova classe baseada em uma classe existente.

‚úîÔ∏è A nova classe herda os atributos e m√©todos da classe original.
‚úîÔ∏è Podemos adicionar novos atributos e m√©todos ou sobrescrever os m√©todos existentes.

Isso evita repeti√ß√£o de c√≥digo e torna o programa mais organizado.

"""

# Classe Base (Superclasse)
class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

    def apresentar(self):
        print(f"Ol√°, meu nome √© {self.nome} e tenho {self.idade} anos.")

# Classe Derivada (Subclasse)
class Funcionario(Pessoa):
    def __init__(self, nome, idade, cargo, salario):
        super().__init__(nome, idade)  # Chamando o construtor da classe Pai
        self.cargo = cargo
        self.salario = salario

    def apresentar_funcionario(self):
        print(f"{self.nome} trabalha como {self.cargo} e ganha R$ {self.salario:.2f}")

# Criando um objeto da subclasse
funcionario1 = Funcionario("Carlos", 30, "Engenheiro", 5000.00)

# Usando m√©todos da classe base e da classe derivada
funcionario1.apresentar()  # M√©todo herdado de Pessoa
funcionario1.apresentar_funcionario()  # M√©todo da subclasse

"""
‚úîÔ∏è A classe Funcionario herda os atributos e m√©todos da classe Pessoa.
‚úîÔ∏è O super().__init__(nome, idade) chama o construtor da classe Pai (Pessoa), evitando repeti√ß√£o de c√≥digo.
‚úîÔ∏è A classe Funcionario adiciona novos atributos e m√©todos (cargo, salario, apresentar_funcionario).

Benef√≠cios da Heran√ßa
üîπ Reutiliza√ß√£o de c√≥digo ‚Üí Evita repeti√ß√£o e facilita a manuten√ß√£o.
üîπ Organiza√ß√£o ‚Üí Torna o c√≥digo mais estruturado e f√°cil de entender.
üîπ Facilidade na expans√£o ‚Üí Podemos criar novas classes sem modificar a base.

    Podemos sobrescrever m√©todos da classe Pai?
Sim! Se quisermos que um m√©todo tenha um comportamento diferente na subclasse, podemos sobrescrev√™-lo.
ex:
"""
# O m√©todo apresentar() foi reescrito na subclasse, ent√£o ele tem um comportamento diferente do m√©todo da classe Pessoa.
class Funcionario(Pessoa):
    def apresentar(self):  # Sobrescrevendo o m√©todo apresentar()
        print(f"Sou {self.nome}, tenho {self.idade} anos e sou funcion√°rio.")

funcionario2 = Funcionario("Ana", 28, "Designer", 4500.00)
funcionario2.apresentar()  # Sa√≠da: Sou Ana, tenho 28 anos e sou funcion√°rio.

"""
Conclus√£o
‚úîÔ∏è Heran√ßa permite que uma classe (subclasse) herde atributos e m√©todos de outra (superclasse).
‚úîÔ∏è Podemos adicionar novos m√©todos e atributos na subclasse.
‚úîÔ∏è Podemos sobrescrever m√©todos da classe base para alterar seu comportamento.
‚úîÔ∏è O super() chama m√©todos da classe Pai, evitando repeti√ß√£o de c√≥digo.
"""

# 1Ô∏è‚É£ Exemplo com V√°rias Subclasses

# Classe Base (Superclasse)
class Animal:
    def __init__(self, nome):
        self.nome = nome
    
    def fazer_som(self):
        print("O animal faz um som.")

# Subclasse Cachorro
class Cachorro(Animal):
    def fazer_som(self):  # Sobrescrevendo o m√©todo
        print(f"{self.nome} diz: Au Au!")

# Subclasse Gato
class Gato(Animal):
    def fazer_som(self):  # Sobrescrevendo o m√©todo
        print(f"{self.nome} diz: Miau!")

# Criando objetos
cachorro = Cachorro("Rex")
gato = Gato("Mimi")

# Chamando m√©todos
cachorro.fazer_som()  # Sa√≠da: Rex diz: Au Au!
gato.fazer_som()      # Sa√≠da: Mimi diz: Miau!

"""
‚úîÔ∏è Criamos a superclasse Animal com um m√©todo gen√©rico fazer_som().
‚úîÔ∏è As subclasses Cachorro e Gato sobrescrevem esse m√©todo com comportamentos espec√≠ficos.
‚úîÔ∏è Isso permite criar diferentes tipos de animais sem modificar a classe base.
"""

# 2Ô∏è‚É£ Exemplo com super() e m√©todos adicionais
# Podemos chamar o m√©todo da classe Pai (super()) e ainda adicionar novos comportamentos na subclasse.

class Veiculo:
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo

    def descrever(self):
        print(f"Ve√≠culo: {self.marca} {self.modelo}")

# Subclasse Carro
class Carro(Veiculo):
    def __init__(self, marca, modelo, portas):
        super().__init__(marca, modelo)  # Chamando o construtor da classe Pai
        self.portas = portas

    def descrever(self):  # Sobrescrevendo o m√©todo
        super().descrever()  # Chamando a vers√£o da classe Pai
        print(f"Tem {self.portas} portas.")

# Criando um objeto da subclasse
meu_carro = Carro("Toyota", "Corolla", 4)
meu_carro.descrever()

"""
‚úîÔ∏è super().__init__(marca, modelo) chama o construtor da classe base.
‚úîÔ∏è O m√©todo descrever() da subclasse chama o da classe Pai e adiciona novas informa√ß√µes.
‚úîÔ∏è Resultado esperado:

Ve√≠culo: Toyota Corolla
Tem 4 portas.

"""

# Exemplo de Heran√ßa M√∫ltipla
# Em Python, uma classe pode herdar de m√∫ltiplas classes ao mesmo tempo.

class Mamifero:
    def __init__(self):
        print("Mam√≠fero criado.")

    def amamentar(self):
        print("Este animal amamenta seus filhotes.")

class Ave:
    def __init__(self):
        print("Ave criada.")

    def voar(self):
        print("Este animal pode voar.")

# Subclasse que herda de Mamifero e Ave
class Morcego(Mamifero, Ave):
    def __init__(self):
        super().__init__()  # Chama o construtor da primeira classe herdada
        print("Morcego criado.")

# Criando um objeto da subclasse
morcego = Morcego()
morcego.amamentar()  # M√©todo da classe Mamifero
morcego.voar()       # M√©todo da classe Ave

"""
‚úîÔ∏è Morcego herda de Mamifero e Ave.
‚úîÔ∏è Ele pode usar m√©todos de ambas as classes (amamentar() e voar()).
‚úîÔ∏è A chamada de super().__init__() executa apenas o construtor da primeira classe listada (Mamifero).
‚úîÔ∏è Se precisar chamar todos os construtores, devemos chamar explicitamente Ave.__init__(self).
ex:
# Subclasse que herda de Mamifero e Ave
class Morcego(Mamifero, Ave):
    def __init__(self):
        Mamifero.__init__(self)  # Chamando explicitamente o construtor de Mamifero
        Ave.__init__(self)       # Chamando explicitamente o construtor de Ave
        print("Morcego criado.")
"""

# Criando M√©todos Gen√©ricos na Superclasse
# Podemos criar m√©todos gen√©ricos na classe Pai e especializ√°-los nas subclasses.

class Funcionario:
    def __init__(self, nome, salario):
        self.nome = nome
        self.salario = salario

    def calcular_bonus(self):
        return 0  # M√©todo gen√©rico

# Subclasse Gerente
class Gerente(Funcionario):
    def calcular_bonus(self):
        return self.salario * 0.10  # 10% de b√¥nus

# Subclasse Desenvolvedor
class Desenvolvedor(Funcionario):
    def calcular_bonus(self):
        return self.salario * 0.20  # 20% de b√¥nus

# Criando funcion√°rios
gerente = Gerente("Alice", 5000)
dev = Desenvolvedor("Bob", 6000)

print(f"B√¥nus do Gerente: R$ {gerente.calcular_bonus():.2f}")
print(f"B√¥nus do Desenvolvedor: R$ {dev.calcular_bonus():.2f}")

"""
‚úîÔ∏è Funcionario define um m√©todo gen√©rico calcular_bonus() que retorna 0.
‚úîÔ∏è Gerente e Desenvolvedor sobrescrevem esse m√©todo com c√°lculos espec√≠ficos.
‚úîÔ∏è Resultado esperado:

ruby
Copiar
Editar
B√¥nus do Gerente: R$ 500.00
B√¥nus do Desenvolvedor: R$ 1200.00

Conclus√£o
‚úîÔ∏è Heran√ßa permite criar classes novas baseadas em classes existentes.
‚úîÔ∏è Subclasses podem sobrescrever m√©todos da superclasse.
‚úîÔ∏è O super() chama m√©todos da classe base, evitando duplica√ß√£o de c√≥digo.
‚úîÔ∏è Heran√ßa m√∫ltipla √© poss√≠vel, mas deve ser usada com cuidado.

"""

# O que √© Polimorfismo?
# O Polimorfismo permite que m√©todos com o mesmo nome tenham comportamentos diferentes dependendo da classe que os implementa.
# Heran√ßa + Polimorfismo na Pr√°tica

class ContaBancaria:
    def __init__(self, titular, saldo):
        self.titular = titular
        self.saldo = saldo

    def exibir_saldo(self):
        print(f"{self.titular}, seu saldo √© R$ {self.saldo:.2f}")

class ContaPoupanca(ContaBancaria):
    def exibir_saldo(self):
        print(f"[Conta Poupan√ßa] {self.titular}, saldo dispon√≠vel: R$ {self.saldo:.2f}")

class ContaCorrente(ContaBancaria):
    def __init__(self, titular, saldo, limite):
        super().__init__(titular, saldo)
        self.limite = limite

    def exibir_saldo(self):
        print(f"[Conta Corrente] {self.titular}, saldo dispon√≠vel: R$ {self.saldo:.2f} com limite de R$ {self.limite:.2f}")

# Criando diferentes contas
conta1 = ContaPoupanca("Carlos", 1500)
conta2 = ContaCorrente("Mariana", 2000, 500)

# Chamando o m√©todo polim√≥rfico
contas = [conta1, conta2]

for conta in contas:
    conta.exibir_saldo()

"""
Sa√≠da esperada:

[Conta Poupan√ßa] Carlos, saldo dispon√≠vel: R$ 1500.00
[Conta Corrente] Mariana, saldo dispon√≠vel: R$ 2000.00 com limite de R$ 500.00
üîπ O mesmo m√©todo (exibir_saldo()) se comporta de maneira diferente nas subclasses.
üîπ Isso √© um exemplo pr√°tico de Polimorfismo!

"""
